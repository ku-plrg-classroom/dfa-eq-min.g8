package kuplrg

import Implementation.*

class Spec extends SpecBase {

  // Number of trials for `mustEqual`
  private val TRIAL = 1_000

  val dfa1 = DFA(1, "ab", "0", "1")
  val dfa2 = DFA(2, "ab", "f", "0")
  val dfa3 = DFA(3, "ab", "ju", "4")
  val dfa4 = DFA(3, "ab", "k7", "6")
  val dfa5 = DFA(3, "01", "3o", "1")
  val dfa6 = DFA(3, "01", "es", "1")
  val dfa7 = DFA(4, "abc", "95n78", "b")
  val dfa8 = DFA(4, "ab", "1eac", "8")
  val dfa9 = DFA(4, "ab", "178s", "2")
  val dfa10 = DFA(5, "abc", "cnpxmud", "r")
  val dfa11 = DFA(5, "abc", "ch6wkel", "8")
  val dfa12 = DFA(5, "01", "3k3n0", "9")
  val dfa13 = DFA(7, "abc", "4330bdljeaak", "8")
  val dfa14 = DFA(7, "01", "32e3c4fp", "7")
  val dfa15 = DFA(7, "ab", "6o62vyv0", "4")
  val dfa16 = DFA(7, "01", "1ms2mwsu", "2x")
  val dfa17 = DFA(7, "ab", "6iluapr5", "1c")
  val dfa18 = DFA(8, "ab", "2let5al74c", "3s")
  val dfa19 = DFA(8, "01", "z0om3p5n3", "1f")
  val dfa20 = DFA(10, "ab", "hadwd99wy9414", "b4")

  def distinctEqPairs(dfa: DFA): Set[(State, State)] = (for {
    s1 <- dfa.states
    s2 <- dfa.states
    if s1 < s2
  } yield (s1, s2)) -- nonEqPairs(dfa)

  test(distinctEqPairs(dfa1), Set())
  test(distinctEqPairs(dfa2), Set((1, 2)))
  test(distinctEqPairs(dfa3), Set())
  test(distinctEqPairs(dfa4), Set((2, 3)))
  test(distinctEqPairs(dfa5), Set())
  test(distinctEqPairs(dfa6), Set())
  test(distinctEqPairs(dfa7), Set())
  test(distinctEqPairs(dfa8), Set())
  test(distinctEqPairs(dfa9), Set())
  test(distinctEqPairs(dfa10), Set((1, 4)))
  test(distinctEqPairs(dfa11), Set())
  test(distinctEqPairs(dfa12), Set())
  test(distinctEqPairs(dfa13), Set((3, 6), (5, 7)))
  test(distinctEqPairs(dfa14), Set((1, 2), (1, 3), (2, 3), (4, 5), (6, 7)))
  test(distinctEqPairs(dfa15), Set((1, 2), (5, 6), (5, 7), (6, 7)))
  test(distinctEqPairs(dfa16), Set((1, 6), (4, 7)))
  test(distinctEqPairs(dfa17), Set())
  test(distinctEqPairs(dfa18), Set((1, 5), (2, 6), (3, 7), (4, 8)))
  test(
    distinctEqPairs(dfa19),
    Set((1, 2), (1, 5), (1, 6), (2, 5), (2, 6), (3, 8), (4, 7), (5, 6)),
  )
  test(distinctEqPairs(dfa20), Set((3, 6), (4, 7), (5, 8)))

  lazy val mdfa1 = minimize(dfa1)
  lazy val mdfa2 = minimize(dfa2)
  lazy val mdfa3 = minimize(dfa3)
  lazy val mdfa4 = minimize(dfa4)
  lazy val mdfa5 = minimize(dfa5)
  lazy val mdfa6 = minimize(dfa6)
  lazy val mdfa7 = minimize(dfa7)
  lazy val mdfa8 = minimize(dfa8)
  lazy val mdfa9 = minimize(dfa9)
  lazy val mdfa10 = minimize(dfa10)
  lazy val mdfa11 = minimize(dfa11)
  lazy val mdfa12 = minimize(dfa12)
  lazy val mdfa13 = minimize(dfa13)
  lazy val mdfa14 = minimize(dfa14)
  lazy val mdfa15 = minimize(dfa15)
  lazy val mdfa16 = minimize(dfa16)
  lazy val mdfa17 = minimize(dfa17)
  lazy val mdfa18 = minimize(dfa18)
  lazy val mdfa19 = minimize(dfa19)
  lazy val mdfa20 = minimize(dfa20)

  test(mdfa1.states.size, 1)
  test(mdfa2.states.size, 1)
  test(mdfa3.states.size, 3)
  test(mdfa4.states.size, 2)
  test(mdfa5.states.size, 3)
  test(mdfa6.states.size, 3)
  test(mdfa7.states.size, 4)
  test(mdfa8.states.size, 4)
  test(mdfa9.states.size, 4)
  test(mdfa10.states.size, 4)
  test(mdfa11.states.size, 5)
  test(mdfa12.states.size, 5)
  test(mdfa13.states.size, 5)
  test(mdfa14.states.size, 3)
  test(mdfa15.states.size, 4)
  test(mdfa16.states.size, 5)
  test(mdfa17.states.size, 7)
  test(mdfa18.states.size, 4)
  test(mdfa19.states.size, 3)
  test(mdfa20.states.size, 7)

  check(dfa1.mustEqual(mdfa1, TRIAL))
  check(dfa2.mustEqual(mdfa2, TRIAL))
  check(dfa3.mustEqual(mdfa3, TRIAL))
  check(dfa4.mustEqual(mdfa4, TRIAL))
  check(dfa5.mustEqual(mdfa5, TRIAL))
  check(dfa6.mustEqual(mdfa6, TRIAL))
  check(dfa7.mustEqual(mdfa7, TRIAL))
  check(dfa8.mustEqual(mdfa8, TRIAL))
  check(dfa9.mustEqual(mdfa9, TRIAL))
  check(dfa10.mustEqual(mdfa10, TRIAL))
  check(dfa11.mustEqual(mdfa11, TRIAL))
  check(dfa12.mustEqual(mdfa12, TRIAL))
  check(dfa13.mustEqual(mdfa13, TRIAL))
  check(dfa14.mustEqual(mdfa14, TRIAL))
  check(dfa15.mustEqual(mdfa15, TRIAL))
  check(dfa16.mustEqual(mdfa16, TRIAL))
  check(dfa17.mustEqual(mdfa17, TRIAL))
  check(dfa18.mustEqual(mdfa18, TRIAL))
  check(dfa19.mustEqual(mdfa19, TRIAL))
  check(dfa20.mustEqual(mdfa20, TRIAL))

  test(isEqual(mdfa1, dfa1), true)
  test(isEqual(mdfa2, dfa2), true)
  test(isEqual(mdfa3, dfa3), true)
  test(isEqual(mdfa4, dfa4), true)
  test(isEqual(mdfa5, dfa5), true)
  test(isEqual(mdfa6, dfa6), true)
  test(isEqual(mdfa7, dfa7), true)
  test(isEqual(mdfa8, dfa8), true)
  test(isEqual(mdfa9, dfa9), true)
  test(isEqual(mdfa10, dfa10), true)
  test(isEqual(mdfa11, dfa11), true)
  test(isEqual(mdfa12, dfa12), true)
  test(isEqual(mdfa13, dfa13), true)
  test(isEqual(mdfa14, dfa14), true)
  test(isEqual(mdfa15, dfa15), true)
  test(isEqual(mdfa16, dfa16), true)
  test(isEqual(mdfa17, dfa17), true)
  test(isEqual(mdfa18, dfa18), true)
  test(isEqual(mdfa19, dfa19), true)
  test(isEqual(mdfa20, dfa20), true)

  /* Write your own tests */
}
